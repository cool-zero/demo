import Debuff from "./Debuff";
import Bullet from "./Bullet";
import Plant from "./Plant";

const WIDTH = 56;
const HEIGHT = 80;

const _createImg = () => {
  const canvas = document.createElement('canvas');
  const width = canvas.width = 56;
  const height = canvas.height = 80;
  const context = canvas.getContext('2d');

  context.save();
  context.beginPath();
  context.fillStyle = 'rgb(37,37,37)';
  context.ellipse(
    width * 0.4,
    height * 0.95,
    height * 0.06,
    height * 0.04,
    0,
    0,
    Math.PI * 2
  );
  context.ellipse(
    width * 0.62,
    height * 0.94,
    height * 0.06,
    height * 0.04,
    0,
    0,
    Math.PI * 2
  );
  context.fill();
  context.closePath();
  context.restore();

  context.save();
  context.beginPath();
  context.fillStyle = 'rgb(163,50,13)';
  context.rect(width * 0.33, height * 0.6, width * 0.07, height * 0.35);
  context.save();
  context.translate(width / 2, height / 2);
  context.rotate(-Math.PI / 18);
  context.translate(-width / 2, -height / 2);
  context.rect(width * 0.5, height * 0.5, width * 0.07, height * 0.45);
  context.restore();
  context.fill();
  context.closePath();
  context.restore();

  context.save();
  context.beginPath();
  context.lineWidth = width * 0.05;
  context.strokeStyle = 'rgb(105,20,9)';
  context.moveTo(width * 0.38, height * 0.38);
  context.lineTo(width * 0.28, height * 0.48);
  context.lineTo(width * 0.14, height * 0.58);
  context.moveTo(width * 0.38, height * 0.38);
  context.closePath();
  context.stroke();
  context.restore();

  // 上身
  context.save();
  context.beginPath();
  context.moveTo(width * 0.3, height * 0.35);
  context.lineTo(width * 0.53, height * 0.35);
  context.lineTo(width * 0.6, height * 0.63);
  context.lineTo(width * 0.3, height * 0.63);
  context.lineTo(width * 0.3, height * 0.35);
  context.closePath();
  context.fillStyle = 'rgb(197,131,56)';
  context.fill();
  context.restore();

  // 扣子
  context.save();
  context.beginPath();
  context.fillStyle = 'rgba(0,0,0,1)';
  for (let i = 0.08; i <= 0.24; i += 0.08) {
    context.arc(
      width * 0.37,
      height * (i + 0.35),
      height * 0.02,
      0,
      Math.PI * 2
    );
    context.fill();
  }
  context.closePath();
  context.restore();

  context.save();
  context.lineWidth = width * 0.05;
  context.strokeStyle = 'rgb(105,20,9)';
  context.beginPath();
  context.moveTo(width * 0.45, height * 0.4);
  context.lineTo(width * 0.37, height * 0.5);
  context.lineTo(width * 0.2, height * 0.6);
  context.moveTo(width * 0.45, height * 0.4);
  context.closePath();
  context.stroke();
  context.restore();

  // 头
  context.save();
  context.beginPath();
  context.arc(
    width * 0.4,
    height * 0.2,
    height * 0.15,
    0,
    Math.PI * 2
  );
  context.closePath();
  context.fillStyle = 'rgb(138,191,137)';
  context.fill();
  context.restore();

  // 眼球
  context.save();
  context.beginPath();
  context.fillStyle = 'rgb(255,255,255)';
  context.strokeStyle = 'rgb(0,0,0)';
  context.arc(
    width * 0.25,
    height * 0.15,
    height * 0.04,
    0,
    Math.PI * 2
  );
  context.closePath();
  context.stroke();
  context.fill();
  context.beginPath();
  context.arc(
    width * 0.45,
    height * 0.15,
    height * 0.05,
    0,
    Math.PI * 2
  );
  context.closePath();
  context.stroke();
  context.fill();
  context.restore();

  // 眼睛
  context.save();
  context.beginPath();
  context.fillStyle = 'rgb(0,0,0)';
  context.arc(
    width * 0.25,
    height * 0.15,
    height * 0.02,
    0,
    Math.PI * 2
  );
  context.arc(
    width * 0.45,
    height * 0.15,
    height * 0.03,
    0,
    Math.PI * 2
  );
  context.fill();
  context.closePath();
  context.restore();

  context.save();
  context.beginPath();
  context.ellipse(
    width * 0.35,
    height * 0.29,
    height * 0.06,
    height * 0.04,
    Math.PI,
    0,
    Math.PI
  );
  context.strokeStyle = 'rgb(0,0,0)';
  context.stroke();
  context.restore();

  return canvas;
};

const ZOMBIE_IMG = _createImg();

export default class Zombie {
  constructor(x, y) {
    this.width = WIDTH;
    this.height = HEIGHT;
    this.x = x + this.width;
    this.y = y - this.height;
    this._initImg = ZOMBIE_IMG;
    this.img = ZOMBIE_IMG;
    this._initBlood = 50;
    this.blood = this._initBlood;
    this._initAtkNumber = 10;
    this.atkNumkber = this._initAtkNumber;
    this.canAttack = true;
    this.canMove = true;
    this.shouldAttack = false;
    this._initMoveSpeed = 0.04;
    this.moveSpeedScale = 1;
    this.moveSpeed = 0.04;
    this._initAtkDuration = 700;
    this.atkTimeLeftScale = 1;
    this.nextAtkTimeLeft = 0;
    this.isDisabled = false;
    this.allDebuff = [];
  }

  move(milliSec) {
    if(this.canMove) {
      this.x -= this.moveSpeed * milliSec * this.moveSpeedScale;
    }
  }

  /**
   * @param {Bullet, Plant} bullet
   */
  beAttacked(bullet) {
    if(bullet instanceof Bullet) {
      if((bullet.x + bullet.width > this.x && bullet.x < this.x + this.width)
        && (bullet.y + bullet.height > this.y && bullet.y < this.y + this.height)) {
        this.blood = Math.round(this.blood - bullet.hurt);
        if(bullet.specialEffect) this.setDebuff(bullet.specialEffect);
        bullet.isDisabled = true;
      }
    }
    if(this.blood <= 0) {
      this.isDisabled = true;
    }
  }

  attack(milliSec) {
    if(this.nextAtkTimeLeft > 0) {
      this.nextAtkTimeLeft -= milliSec * this.atkTimeLeftScale;
    }else {
      this.canAttack = true;
      this.nextAtkTimeLeft = this._initAtkDuration;
    }
    if(this.canAttack && this.shouldAttack) {
      this.canMove = false;
      return this.atkNumkber;
    }else {
      this.canMove = true;
      return 0;
    }
  }

  /**
   *
   * @param {Debuff} debuff
   */
  setDebuff(...debuff) {
    let temp;
    let index;
    for (let i = debuff.length - 1; i >= 0; i--) {
      temp = debuff[i];
      if(temp instanceof Debuff) {
        index = this.allDebuff.findIndex(
          item => temp.constructor === item.constructor
        );
        if(index !== -1) {
          this.allDebuff.splice(index, 1);
        }
        this.allDebuff.unshift(temp);
      }
    }
  }

  updateDebuff(milliSec) {
    let debuff;
    for (let i = this.allDebuff.length - 1; i >= 0; i--) {
      debuff = this.allDebuff[i];
      if(debuff instanceof Debuff) {
        debuff.affect(this);
        if(debuff.update(milliSec)) {
          this.allDebuff.splice(i, 1);
        }
      }
    }
  }

  /**
   * @param {CanvasRenderingContext2D} context
   */
  draw(context) {
    context.drawImage(this.img, this.x, this.y);
  }

  /**
   * @param {Function} end
   * @returns {boolean}
   */
  enterHouse(end) {
    if(!end) throw new Error(`未设置`);
    if((this.x + this.width) < 0) {
      end();
      return true;
    }
    return false;
  }

}
